{"version":3,"sources":["pages/index.js","App.js","serviceWorker.js","index.js"],"names":["Loading","react_default","a","createElement","routes","path","component","Loadable","loader","__webpack_require__","e","then","bind","loading","exact","Promise","all","App","state","activeMenu","isOpen","toggle","_this","setState","className","key","NavLink","to","map","route","i","Route","Object","assign","length","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAIMA,EAAU,WACd,OAAOC,EAAAC,EAAAC,cAAA,qCCDHC,EAAS,CACb,CACEC,KAAM,IACNC,UDCgBC,IAAS,CAC3BC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASb,ICFPc,OAAO,GAET,CACET,KAAM,YACNC,UDAoBC,IAAS,CAC/BC,OAAQ,kBAAMO,QAAAC,IAAA,CAAAP,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASb,KCAT,CACEK,KAAM,cACNC,UDAsBC,IAAS,CACjCC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASb,KCAT,CACEK,KAAM,UACNC,UDAkBC,IAAS,CAC7BC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASb,MCgDIiB,6MA7CbC,MAAQ,CACNC,WAAY,IACZC,QAAQ,KAGVC,OAAS,WACPC,EAAKC,SAAS,CACZH,QAASE,EAAKJ,MAAME,kFAKtB,MAAO,CAEHnB,EAAAC,EAAAC,cAAA,UAAQqB,UAAU,6CAA6CC,IAAI,KACjExB,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,SACbvB,EAAAC,EAAAC,cAAA,MAAIqB,UAAU,kBAAd,cACAvB,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,2CACbvB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAASF,UAAU,WAAWG,GAAG,IAAIb,OAAK,GAA1C,QACAb,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAASF,UAAU,WAAWG,GAAG,aAAjC,YACA1B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAASF,UAAU,WAAWG,GAAG,eAAjC,cACA1B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAASF,UAAU,WAAWG,GAAG,WAAjC,aASNvB,EAAOwB,IAAI,SAACC,EAAOC,GAAR,OACT7B,EAAAC,EAAAC,cAAC4B,EAAA,EAADC,OAAAC,OAAA,CAAOR,IAAKK,EAAE,GAAOD,MAKvB5B,EAAAC,EAAAC,cAAA,UAAQqB,UAAU,mBAAmBC,IAAKrB,EAAO8B,OAAO,GACtDjC,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,SACbvB,EAAAC,EAAAC,cAAA,+BAAsBF,EAAAC,EAAAC,cAAA,KAAGgC,KAAK,6BAAR,aAAtB,QAA4ElC,EAAAC,EAAAC,cAAA,KAAGgC,KAAK,2BAAR,QAA5E,eAvCMC,aCZEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4FCHDH,OAAOvB,UACVuB,OAAOvB,QAAUA,KAGnB2B,IAASC,OACL1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,KACI3C,EAAAC,EAAAC,cAAC0C,EAAD,OAEFC,SAASC,eAAe,SD0GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.559c425a.chunk.js","sourcesContent":["import React from 'react';\n//import withSplitting from '../components/withSplitting';\nimport Loadable from 'react-loadable';\n\nconst Loading = () => {\n  return <div>로딩중...</div>;\n};\n\nexport const Home = Loadable({\n  loader: () => import('./Home'),\n  loading: Loading\n});\nexport const Provider = Loadable({\n  loader: () => import('./Provider'),\n  loading: Loading\n});\nexport const Subscriber = Loadable({\n  loader: () => import('./Subscriber'),\n  loading: Loading\n});\nexport const Signin = Loadable({\n  loader: () => import('./Signin'),\n  loading: Loading\n});\n","import React, { Component } from 'react';\nimport { Route, NavLink } from 'react-router-dom';\nimport { Home, Provider, Subscriber, Signin } from './pages';\n\nconst routes = [\n  {\n    path: \"/\",\n    component: Home,\n    exact: true\n  },\n  {\n    path: \"/provider\",\n    component: Provider\n  },\n  {\n    path: \"/subscriber\",\n    component: Subscriber\n  },\n  {\n    path: \"/signin\",\n    component: Signin\n  },\n];\n\nclass App extends Component {\n  state = {\n    activeMenu: \"0\",\n    isOpen: false\n  }\n\n  toggle = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return [\n\n        <header className=\"container cover-container masthead mb-auto\" key=\"0\">\n          <div className=\"inner\">\n            <h3 className=\"masthead-brand\">uSearch.me</h3>\n            <nav className=\"nav nav-masthead justify-content-center\">\n              <NavLink className=\"nav-link\" to=\"/\" exact>Home</NavLink>\n              <NavLink className=\"nav-link\" to=\"/provider\">Provider</NavLink>\n              <NavLink className=\"nav-link\" to=\"/subscriber\">Subscriber</NavLink>\n              <NavLink className=\"nav-link\" to=\"/signin\">Signin</NavLink>\n            </nav>\n          </div>\n        </header>,\n\n        // <Route path=\"/\" exact component={Home} key=\"2\" />,\n        // <Route path=\"/provider\" component={Provider} key=\"3\" />,\n        // <Route path=\"/subscriber\" component={Subscriber} key=\"4\" />,\n\n        routes.map((route, i) => (\n          <Route key={i+1} {...route} />\n        )),\n\n        //{/* <Route path='/dashboard' render={(props) => <Dashboard {...props} isAuthed={true} />} /> */}\n\n        <footer className=\"mastfoot mt-auto\" key={routes.length+1}>\n          <div className=\"inner\">\n            <p>Cover template for <a href=\"https://getbootstrap.com/\">Bootstrap</a>, by <a href=\"https://twitter.com/mdo\">@mdo</a>.</p>\n          </div>\n        </footer>\n    ];\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport Promise from 'promise-polyfill';\n\nimport './lib/bootstrap'\nimport './index.css';\n//import './css/wireframe.css';\n//import './css/wireframe2.scss';\n\n// To add to window\nif (!window.Promise) {\n  window.Promise = Promise;\n}\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}